<h2 class="page-header">Resource Files to Control Layout</h2>

<p>You can use resource files with specific naming conventions to control which layout file is used in an application based on various conditions. If you go into the Project pane view and drill into your app/src/res file, right clicking the res folder lets you select a new Android Resource Directory option, as shown here:

<p><img src="img/new-resource-file.png">

<p>The Resource Type should be changed to Layout in the second dropdown. Then you can name the directory something like layout-w820dp. The w indicates that the files should be used when the width of the device in its current orientation is at least some number of pixes wide. The 820 is the number of pixels, and dp indicates we are using the device independent pixels metric. I suggest you read up on the android guides about <a href="https://developer.android.com/guide/practices/screens_support.html">supporting multiple screens on the Android developer site</a> to get some more information if this is foggy or unknown terminology to you.

<p>Let's hit "reset" and start a new project. We are going to create a new project called LayoutDemo and make a BasicActivity template, checking the "use fragment" option on the last page before clicking finish. When we do so, we end up with a MainActivity class and a MainActivityFragment class. Also, for resources, you'll see a activity_main, content_main, and fragment_main xml file.

<p>Running the app in its present state will look identical on the two devices. Let's show how we can use the resource file to provide a different view depending on the device pixels. Go ahead and create the resouce directory layout-w820dp inside of this project and selecting the "layout" as the type as indicated earlier on this page.

<p>We're going to create a different version of content_main.xml now, copy and pasting the entire file from the layout file into the layout-w820dp directory we just created:

<p><img src="img/content-main-copy.png">

<p>In this new content_main.xml file, we need to make a number of changes. We're going to set up a linear layout so that we can nest a fragment and a FrameLayout element inside of it. We've worked with both types of objects before, and I'm assuming you already understand what a LinearLayout is, so I'll just show the code in a moment. This is just a LinearLayout where the fragment is on the left and the anchor for our second fragment, which we will add a fragment to programatically, will be on the right.

<p>Here's the code:
<pre class="prettyprint linenums pre-scrollable">
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/container"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="horizontal"
    app:layout_behavior="@string/appbar_scrolling_view_behavior">

    &lt;fragment
        android:id="@+id/fragment"
        android:name="com.example.admin.layoutdemo.MainActivityFragment"
        android:layout_width="0dp"
        android:layout_height="match_parent"
        android:layout_weight="1"
        tools:layout="@layout/fragment_main" />

    &lt;FrameLayout
        android:id="@+id/detail_fragment_container"
        android:layout_width="0dp"
        android:layout_height="match_parent"
        android:layout_weight="1" />
&lt;/LinearLayout>
</pre>

<h4>Interacting with the layout</h4>
<p>Remember when I mentioned that boolean back at the beginning of this tutorial? Well, we're finally going to use it. Navigate to the MainActivity class and create the private variable:

<pre class="prettyprint">
private boolean mTablet;
</pre>

<p>Also, go add "android:id="@+id/textOutput" to the TextView in the fragment_main.xml file so that we can put some text there.
<p>Finally, go into the MainActivity class and add the folowing code. It's nothing new or special - we're just trying to find the detail_fragment_container and, if it's not there, we set mTablet to false because we are obviously using a smaller device. Otherwise we set it to true - this happens when the resource file we created is being used because the pixel width is 820 or higher. At that point, we could programatically add a fragment using the methods discussed previously in this tutorial; let your creativity flow! Or good design principles, at least.

<pre class="prettyprint linenums">
protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Go find the fragment container we set up - if it exists
        ViewGroup fragmentContainer = (ViewGroup) findViewById(R.id.detail_fragment_container);
        // if fragmentContainer is null, then small device -- using original content_main
        mTablet = (fragmentContainer != null);

        // Grab a textview
        TextView tvOutput = (TextView) findViewById(R.id.textOutput);
        tvOutput.setText("mTablet is set to " + mTablet);
</pre>

<p><img src="img/phone-frag-check.png"></img>
<p><img src="img/tablet-frag-check.png"></img>
